# tactiq.io free youtube transcript
# Phase Encoding Gradient MRI | MRI Signal Localisation | MRI Physics Course #9
# https://www.youtube.com/watch/znAuKFfOGPU

00:00:00.000 hello everybody and welcome back so this is the third talk in a three-part Series where we're  
00:00:04.560 looking at how exactly we localize signal within an MRI image now what have we done so far well  
00:00:10.500 first we've seen how we can select a specific slice along the z-axis using what's known as a  
00:00:17.400 slice selection gradient and this spins within that slice will be resonating or processing in  
00:00:23.460 Phase with one another we've then looked at how we can create a frequency differential along the  
00:00:29.700 x-axis of that slice and use that frequency encoding gradient to delineate where signal  
00:00:36.540 is coming from along that x-axis based on the frequencies of those spins now when we apply  
00:00:42.780 this frequency encoding gradient we apply it over the time that we are sampling that signal  
00:00:49.020 now as you can see this frequency encoding gradient will cause the spins to process  
00:00:53.940 faster at this end of the x-axis than they will at this end of the x-axis and there will  
00:00:59.820 be a gradient of frequencies as we move along that x-axis now when we apply that frequency  
00:01:06.900 encoding gradient see how this spins on this edge of the slice or processing faster than  
00:01:12.300 the spins on the other end of the slice now we can measure the net magnetization Vector of the  
00:01:18.840 entire slice over a period of time and that's what's known as the data acquisition time now  
00:01:24.420 that data acquisition time happens during this frequency encoding gradient now we can sample that  
00:01:30.480 multiple times converting this analog signal into a digitized signal a digital signal and we get  
00:01:38.400 discrete digital values for each point along that analog signal and the number of times we sample  
00:01:44.940 that analog signal will determine the number of frequencies we can delineate along that x-axis  
00:01:51.720 Now using this signal that we've recorded during data acquisition we can perform what is known as a  
00:01:58.020 one-dimensional inverse Fourier transformation now what that Fourier transformation does  
00:02:03.240 is it calculates the frequencies that are responsible for that net magnetization vector  
00:02:10.080 the change of that net magnetization Vector over time is unique for a specific subset of  
00:02:16.020 frequencies with varying different amplitudes now based on the frequencies that we've teased  
00:02:22.020 out of this net magnetization Vector signal we can place those signals along the x-axis  
00:02:28.260 because the different frequencies correspond to a different x-axis location now in the previous  
00:02:33.480 talk in order to avoid some confusion I used this example here which is technically incorrect you  
00:02:39.960 can see that when we are acquiring the signal we get this rephasing and then defacing at a  
00:02:46.440 free induction Decay rate of the signal now what causes that rephasing and defacing at te what is  
00:02:52.920 this 180 degree radio frequency pulse that 180 degree radio frequency pulse as we looked at  
00:02:58.800 in the slide selection talk causes the spins to D phase and then re-phase exactly at te and we  
00:03:06.720 get that rephasing causing an increase in signal and then we get that free induction Decay now the  
00:03:13.500 increase in Signal allows us to account for the local magnetic field in homogeneities and get a  
00:03:19.140 c signal at a te that is much more similar to a true T2 Decay now that is confusing  
00:03:25.020 to you go back to the slide selection and the frequency encoding gradient talks now because  
00:03:30.300 we get that increase and decrease in Signal the net magnetization Vector that we read out from  
00:03:35.580 this slide is actually going to look a lot more like this where we get an increase in signal up  
00:03:42.120 to t e and then a decrease in Signal that's occurring because of those re-phasing within  
00:03:47.580 the slice now we saw that we can sample that analog signal multiple different times and I  
00:03:53.640 used a very small sample number when we looked at frequency encoding in fact we can sample that many  
00:04:00.180 more times we often use 128 or 256 different samples during that data acquisition period  
00:04:07.740 now the frequencies that are contributing to this signal remain the same they're based on  
00:04:13.140 that x-axis frequency encoding gradient now we can take this signal the combination of all these  
00:04:19.440 different frequencies and we can delineate those frequencies and organize them in a way that go  
00:04:24.780 from low frequency to high frequency the higher frequency net magnetization vectors are going to  
00:04:31.080 correspond to this region on the slice the lower frequencies will be at the other end of the slice  
00:04:37.260 what we've done here is we've converted a time-based domain where we're sampling  
00:04:42.300 that analog signal over time during that frequency encoding gradient and we've used a one-dimensional  
00:04:49.140 Fourier transformation to encode these specific frequencies that are contributing to that image  
00:04:55.740 now the frequencies we order from low to high which will give us the x-axis signals of the  
00:05:02.040 slice that we've selected it's going to give us the entire column signal along that particular  
00:05:07.320 slice now as I've mentioned that transformation is an inverse one-dimensional Fourier transformation  
00:05:13.560 Now using this single data acquisition during this frequency encoding gradient what we're able to do  
00:05:20.100 is create an image based on the signal coming from the entire column at the different x-axis  
00:05:26.580 locations now in order to create this image here we've only passed through the sequence once we've  
00:05:33.480 used this data that we've acquired over time and used it to delineate the different frequencies  
00:05:39.300 the unique combination of frequencies that will give us this analog signal here now we've got no  
00:05:45.720 way of knowing where that signal is coming from along the y-axis and this talk we're going to see  
00:05:51.780 how we can delineate those signals based on y-axis location now let's go back to the slice we look at  
00:05:58.620 the slice at a period of time where we haven't yet applied our frequency encoding gradients and we've  
00:06:04.320 Switched Off The Slice selection gradient as well as our radio frequency pulse what's happening in  
00:06:10.740 this slice at this given period of time well the spins in this slice are resonating all in Phase  
00:06:17.220 with one another at the same frequency the only magnetization that this slice is experiencing at  
00:06:23.280 the moment is our main magnetic field and we've seen that processional frequency is  
00:06:28.080 proportional to the magnetic field and if it's only experiencing the main magnetic field all  
00:06:34.260 of these spins will be processing in Phase with one another now spins that are spinning in Phase  
00:06:39.480 with one another will provide a sinusoidal signal that can be measured out remember we have yet to  
00:06:45.660 apply that frequency encoding gradient now these spins are accumulating because they're in Phase  
00:06:52.020 with one another giving us a net magnetization Vector that looks like this now if we were trying  
00:06:57.720 to calculate the y-axis contributions to this net magnetization Vector we would see that the signal  
00:07:04.380 coming from each location along those y-axis would be in Phase with one another and they would be  
00:07:10.800 processing at the same frequency you can see that it's the accumulation of these different y-axis  
00:07:17.280 components that's giving us this net magnetization Vector that we're measuring remember we're only  
00:07:22.620 measuring that one cumulative signal that is represented by this red line here now what we  
00:07:28.800 need to do is introduce some differentiation along the y-axis now in order to do that we  
00:07:33.840 can look at our slice within the Cartesian plane here we have applied a frequency encoding gradient  
00:07:40.020 along the x-axis now we need to apply some sort of gradient along the y-axis in order to introduce  
00:07:46.920 some differences based on y-axis location now the way we do this is by applying what's known as a  
00:07:53.040 phase encoding gradient now the phase encoding gradient can't induce frequency changes along  
00:07:59.640 the y-axis our x-axis localization using this frequency encoding gradient only works if the  
00:08:06.720 frequencies at a specific x-axis location are the same in that entire y-axis column so we now can't  
00:08:13.680 introduce frequency changes along this y-axis so how do we get about doing this well what we  
00:08:18.780 do is apply a gradient between the 90 and the 180 degree radio frequency pulses that magnetic  
00:08:26.640 field gradient is happening here in the y-axis using these gradient coils now there are multiple  
00:08:32.520 different ways that we can represent this gradient we can represent this gradient using this blue  
00:08:37.919 line here where we see that the magnetic field at the top end of our slice is increased by a  
00:08:44.220 certain amount and at the bottom end of the slice is decreased by a certain amount we've applied a  
00:08:49.860 gradient along this y-axis we can also represent this gradient using this color change here  
00:08:55.260 you will see there's a specific point along this gradient where the net magnetization will be  
00:09:00.840 our main magnetic field we've neither added nor subtracted any net magnetization to this central  
00:09:07.980 part of our image now most commonly you'll often see it represented using this symbol here where  
00:09:13.680 we are adding magnetization to the upper half of our slice and subtracting magnetization from the  
00:09:19.980 main magnetic field to the lower half of our slice again there is a point where there is no change in  
00:09:26.160 magnetization and that's what's known as the null point which we'll see is really important when we  
00:09:30.480 go about localizing that signal later now what we're going to do is apply this phasing coding  
00:09:35.700 gradient for a specific period of time and you can see that the application of this phase encoding  
00:09:41.880 gradient for this short period of time causes the spins to D phase based on their y-axis location  
00:09:49.260 because the magnetic field strength is stronger as we head out to the peripheries here we will  
00:09:55.020 get more dephasing of these spins than we do as we get closer to the null point  
00:10:00.720 you'll see at the no point there is no dephasing of those spins they are still processing at the  
00:10:07.560 Llama frequency that's based on the main magnetic field and you'll see that relative to this spins  
00:10:13.440 at the null point we will get the phasing of these spins in the anti-clockwise direction  
00:10:19.560 now we've defased these spins based on their y-axis location  
00:10:24.720 now once we've turned off that phase encoding gradient what's going to happen to these spins  
00:10:29.760 well they will be experiencing the main magnetic field they will continue to process based on the  
00:10:36.060 main magnetic field strength so let's turn off this phase encoding gradient and see what happens  
00:10:40.740 to these spins they are now processing at a rate that's proportional to the main magnetic field  
00:10:46.920 that's the only magnetic field that is influencing the slice at this given period of time you can  
00:10:53.160 see now that the frequencies are all the same the frequencies are the Llama frequency that's  
00:10:58.980 proportional to the main magnetic field what's different is we've introduced some phase change  
00:11:04.020 based on the y-axis location of these spins now let's see what happens to the net magnetization  
00:11:09.720 Vector that we measure from the entire slice when we apply a phase encoding gradient remember when  
00:11:16.260 these spins were processing in phase and we hadn't applied a phasing coding gradient the  
00:11:21.720 y-axis contributions were all in Phase with one another now look what happens to these y-axis  
00:11:28.440 contributions as we apply that phase encoding gradient you see now that these are out of phase  
00:11:35.760 with one another the peaks of these signals no longer line up now look what happened to the  
00:11:41.220 net magnetization Vector that we measured as we apply that phase encoding gradient you see we get  
00:11:47.760 loss of net magnetization Vector signal because of that dephasing and transverse magnetization is a  
00:11:54.840 function of how in Phase those spins are with one another now once that phase encoding gradient is  
00:12:00.180 Switched Off all of those spins all of those net magnetization vectors are going to process at the  
00:12:06.300 Llama frequency all we've done now is introduce phase difference based on y-axis location  
00:12:12.360 now what we're going to do is we're going to apply a frequency encoding gradient to that slice now  
00:12:19.680 what is that frequency encoding gradient going to do to these spins well the spins or the net  
00:12:25.440 magnetization vectors at the far end of the slice are going to process at a faster rate than those  
00:12:31.620 at the near end of the slice we are going to now introduce a frequency encoding gradient along that  
00:12:38.040 slice now as we introduce that frequency encoding gradient you can see how this spins on the right  
00:12:44.100 hand side of our image are processing faster than those at the left hand side and then we can go  
00:12:49.260 and measure the net magnetization Vector of that entire slice now this net magnetization Vector  
00:12:55.320 can still be sampled during our data acquisition period and we can get discrete values over time  
00:13:02.760 if you look at each column of spins here although it looks like a disorganized chaos and mess you  
00:13:08.640 can see that each column still has the same frequency as all of those spins along that  
00:13:14.580 x-axis column the difference here is that the phase encoding gradient has applied some memory  
00:13:20.160 here we've got the phasing of these spins based on their y-axis location although their frequencies  
00:13:26.280 are the same depending on where they're located along the x-axis now we can take this data  
00:13:32.580 acquisition that we've got here and correlate it to the specific phase encoding gradient that we  
00:13:37.920 used now if we compare that to the signal that we generated without phase encoding we can see that  
00:13:44.760 we've acquired two different data Acquisitions the first was the net magnetization Vector  
00:13:50.700 over time without any phase change in the y-axis Direction the second data set that we've acquired  
00:13:57.840 has now taken the net magnetization Vector over time but it's required that when there's been a  
00:14:04.800 certain amount of phase encoding applied in the y-axis Direction now both of these are encoding  
00:14:10.680 for the same image the anatomy that we're Imaging in that specific slice hasn't changed at all the  
00:14:17.040 only thing that's changed between these two data acquisition periods is the amount of phase that we  
00:14:22.020 are introducing into the y-axis we can use either one of these data sets to do a one-dimensional  
00:14:28.860 inverse Fourier transformation and calculate the x-axis locations and the amplitude of the signal  
00:14:35.400 at each x-axis location now we can repeat this by using a larger phase encoding gradient and what we  
00:14:42.900 can do is increase the magnetic field strength along that y-axis location creating a larger  
00:14:49.260 phase encoding gradient in the y-axis Direction now look what happens to these net magnetization  
00:14:55.320 vectors when we apply an increased phase encoding gradient we're applying a stronger phase encoding  
00:15:01.440 gradient along the y-axis we can see that these spins now or these net magnetization vectors  
00:15:07.620 have de-phased even further and we're getting a further reduction in signal remember when we  
00:15:14.160 acquired this one we saw there was a reduction in signal and you can kind of see that reduction in  
00:15:18.900 Signal when you compare these two data acquisition points the signal here is lower than the signal  
00:15:24.720 when there wasn't any phasing again now what's happened is based on the location in the y-axis  
00:15:30.780 here we have gotten even more de-phasing than we had in our first example now hopefully you can see  
00:15:37.080 here that The Closer the spins are to the null point where there's no change in magnetization  
00:15:42.240 Vector the less phase change there will be and as we change the strength of the phasing coding  
00:15:48.840 gradient through multiple different iterations those that are near the periphery of the slice  
00:15:53.580 are going to experience more phase change than those closer to the null points on the slice and  
00:15:58.860 it's that degree or phase change as we change the phase encoding gradient that is going to help us  
00:16:04.620 to localize that y-axis signal at least in part and you can see that those that experience more  
00:16:10.380 phase change that signal is likely coming from a y-axis location that is further away from the  
00:16:15.240 null Point again we can apply a frequency encoding gradient here and as we are applying that gradient  
00:16:21.480 measure out another signal now you can see that that signal is even less at this specific phase  
00:16:29.100 strength because these spins are even more out of phase with one another however we can still use  
00:16:35.160 the signal that we've acquired over a period of time as we're converting that analog signal into a  
00:16:40.440 digital signal we can still do a one-dimensional inverse for your transformation and get x-axis  
00:16:46.980 locations with specific signals for the entire Columns of that x-axis now not only can we apply  
00:16:53.400 a phase encoding gradient along the y-axis in One Direction we can actually apply it in the  
00:16:58.920 opposite direction where the lower part of our slice is now gaining magnetic field strength and  
00:17:04.800 the upper part of our slice is losing magnetic field strength relative to that main magnetic  
00:17:09.660 field and as we apply that gradient here we can see we get dephasing in the opposite direction  
00:17:15.599 we are still losing signal here again we allow time to pass and we apply a frequency encoding  
00:17:23.460 gradient along the x-axis of our slice as we apply that frequency encoding gradient we can  
00:17:29.280 measure the signal the net magnetization Vector signal of the entire slice and get another data  
00:17:35.340 acquisition now the data that we've acquired here corresponds to this phase change now it turns out  
00:17:42.360 that we can repeat the step multiple times to acquire multiple different phase change datas  
00:17:48.540 and the number of phases that we use the number of phase encoding steps that we use determines  
00:17:54.780 the number of pixels that we can delineate in the y-axis of the picture that we're trying to create  
00:18:00.720 now I said when we use the frequency encoding gradient we only required one cycle here from  
00:18:06.720 the 90 degree RF pulse to the time of repetition in order to apply another phase encoding step we  
00:18:14.580 need to repeat the sequence over again at first we applied NO phase encoding gradient we got our data  
00:18:22.740 here from the frequency encoding step and then we waited to tr we allowed those spins to gain  
00:18:29.760 longitudinal magnetization before then flipping them to 90 degrees and repeating the process  
00:18:34.980 once we flip those to 90 degrees we then applied at different phase encode ingredients acquired  
00:18:41.880 a different data set at our frequency encoding gradient we then again waited till our time of  
00:18:46.860 repetition before repeating the sequence again with a different phase encoding gradient you  
00:18:52.500 can see that for each additional phase encoding gradient we need to repeat the sequence therefore  
00:18:57.900 in order to add resolution in the y-axis Direction in the phase encoding Direction it takes much  
00:19:04.260 longer because we need to repeat the cycle over and over again for each phase encoding gradient  
00:19:09.900 that we are applying to our sample now if we look at the data that we've acquired so far  
00:19:15.600 we've used four different phase encoding steps we can then use different magnitudes of phase  
00:19:21.060 encoding and apply that signal that we've acquired to a matrix here and each time we  
00:19:27.540 use a different phase strength we can generate a different signal here and the way that we organize  
00:19:33.840 the signal that we're generating is based on the amount of phase that we use to acquire that signal  
00:19:40.140 by convention we acquire the unfazed sample and then each time we repeat the cycle we introduce  
00:19:48.180 a small amount of phase in both the positive and negative directions so we first then apply a small  
00:19:53.820 amount of positive phase and acquire this line of data in our next cycle we apply a small amount of  
00:19:59.700 negative phase and we acquire this line of data we then repeat this process over and over again  
00:20:06.360 until we've done the number of phase encoding steps that allows us to get the resolution that  
00:20:11.700 we want on the y-axis of our image now what we are creating here is not an image we're not creating  
00:20:17.880 pixels the grayscale values here represents a data point a numerical value and as those data points  
00:20:25.020 that we're going to plug into formulas later that we can use then to generate our image now  
00:20:30.840 once we've acquired enough phase encoding steps to give us the y-axis resolution that we want we will  
00:20:37.320 ultimately create what is known as k space now the number of rows that we've included in k space here  
00:20:43.680 will equal the number of phase encoding steps that we have done and it's those phase encoding  
00:20:48.360 steps that will determine our y-axis resolution in the image now each line of this case space  
00:20:54.840 represents the net magnetization Vector change over a given period of time and we can use that  
00:21:01.800 one-dimensional Fourier transformation to take that data from the individual row and transform  
00:21:07.500 it into frequency based or x-axis location based data and we can do that for each and every phase  
00:21:14.340 encoding step that we've used in our sequence here so we can convert k space data which is  
00:21:20.100 time-based data each point along the x-axis in k space represents the net magnetization Vector of  
00:21:26.760 the entire slice at a given period in time and we can convert that into a frequency based or x-axis  
00:21:33.480 location based data set here this process is a one-dimensional inverse Fourier transformation in  
00:21:40.080 both of these the only thing that differs between the various different rows here is the amount of  
00:21:45.900 phase that we have applied in the sequence here now you can see that signal gets stronger and  
00:21:52.200 it gets weaker as we head along in time that's representing the signal phasing and dephasing  
00:21:58.260 you can also see that signal gets weaker as we head out to the peripheries that's representing  
00:22:03.840 the amount of de-phasing that we have applied as we have applied stronger and stronger phase  
00:22:08.760 encoding gradients now if we look at both k space and this one-dimensional Fourier transform we can  
00:22:15.180 see that the values along the x-axis here are coming from the data acquisition time that is  
00:22:21.960 happening during the frequency encoding gradient we can also see that the rows that are generating  
00:22:27.600 k space are occurring at varying different phase encoding steps that is how we create this k-space  
00:22:34.680 data now we can use this k space data as well as this one-dimensional Fourier transformation  
00:22:39.720 data combine those data sets to give us ultimately the image that we're trying to create now I want  
00:22:47.040 to take you through a very basic process that is going to show you how we can combine these data  
00:22:52.380 sets in order to create this image now the way that we're going to describe this is a much more  
00:22:58.260 simplified version of the actual process that is happening in the background we are going to take  
00:23:03.660 only two data points along a specific x-axis location when in fact often we're using 256  
00:23:10.380 different data points and comparing them to one another now the process that we're going to use to  
00:23:15.240 delineate those two separate points is applicable to the process that's used to delineate 256  
00:23:21.720 different points except in our example we'll only have two variables in actual practical sense when  
00:23:27.240 we're generating MRI images in real life there are 256 different variables now much of what I'm going  
00:23:33.360 to explain to you here is adapted from Dr Alan elster at mriquestions.com and I'm going to link  
00:23:39.120 those articles below go and check them out he has a very good way of explaining these and I've just  
00:23:44.040 adapted these to show you a slightly different way of how we can go about calculating where signal is  
00:23:49.560 coming from at each location on our image so what we want to do is take two separate pixels here  
00:23:56.220 that have the same x-axis location and try and delineate the actual pixel values for these two  
00:24:02.760 locations now where exactly in this data set is the signal coming from in these two pixels well we  
00:24:10.200 have organized the signal in this data set based on x-axis location so the signals here will impart  
00:24:17.520 come from these two pixels that we are trying to calculate now I'm going to take you through a set  
00:24:22.740 of examples to show you at least in theory how we can separate these two signals now in order  
00:24:28.560 to do this we're going to make two assumptions the first assumption that we're going to make is all  
00:24:33.840 of the signal coming from this specific x-axis location is only coming from these two pixels  
00:24:39.840 now we know that isn't true we know the signal on that x-axis location is coming from 256 different  
00:24:47.220 pixels but for our example we're going to assume that it's only coming from those two pixels  
00:24:52.680 the second assumption that we're going to make is that we can calculate the degree of phasing  
00:24:57.900 that is required for the spins in either these two pixels to be 180 degrees out of phase with  
00:25:04.080 one another now this isn't a false assumption we know the phase encoding gradients that we're  
00:25:09.960 applying to the slides that we've selected and we know the location of the pixels that we are  
00:25:15.300 trying to calculate the signal value for and there is a mathematical formula that will allow  
00:25:20.220 us to calculate which degree of phasing based on the location of these two pixels will cause  
00:25:25.380 the spins to be 180 degrees out of phase or one another we're not going to actually calculate  
00:25:30.120 that but it can be done so let's have a look at these two in closer detail now as we looked  
00:25:36.180 at before depending on the y-axis location of these particular pixels they will experience  
00:25:41.520 different degrees of dephasing as we expose them to different levels of phase encode ingredients  
00:25:48.540 now in order to calculate that degree of phasing we first need to figure out what is the pixel  
00:25:55.200 value when these spins are perfectly in Phase with one another we first need that in our data set now  
00:26:02.160 when will these pixels be perfectly in Phase with one another there will be no phase change along  
00:26:07.800 the y-axis when we don't apply a phase encode ingredient so when we don't apply a phase encoding  
00:26:14.340 gradient we know that we generate the frequency data at the center of this frequency data set here  
00:26:20.940 this data set at this given point here represents all of the net magnetization vectors delineates  
00:26:28.020 it into frequencies when we haven't applied any phase encoding along the y-axis this particular  
00:26:34.860 data point here represents all of the signal coming from the x-axis column along our image  
00:26:42.660 now that signal coming from the x-axis column in our image we're making the assumption that that  
00:26:48.000 signal is only coming from these two pixels of Interest it also represents the signal that is  
00:26:54.300 coming over the entire period of data acquisition time remember we've used all of that data that  
00:27:00.120 we generated in k space to Fourier transform and create this frequency based location here  
00:27:06.840 now there'll only be one period of time along our pulse sequence when the spins will be perfectly  
00:27:12.180 in Phase with one another and that's te remember we get this increase in Signal as those spins are  
00:27:19.500 re-facing with one another and they're perfectly in phase at te not only are they perfectly in  
00:27:25.020 Phase a te based on our slide selection gradient they are also perfectly in Phase that t based on  
00:27:30.720 the frequency encoding gradient remember we apply a short negative or D phasing frequency encoding  
00:27:37.680 gradient before we apply the frequency encoding gradient allowing those spins to re-phase as  
00:27:43.680 we're changing their frequencies and it turns out at exactly the middle of this frequency encoding  
00:27:48.780 gradient is when all those spins will be perfectly in Phase with one another they will have differing  
00:27:54.720 frequencies but for that brief moment in time the net magnetization vectors will all be pointing in  
00:27:59.940 the same way now the second assumption we made is that we know a specific amount of  
00:28:05.340 phase application that will cause the spins in these two pixels to be perfectly out of phase  
00:28:11.640 with one another and again that can be calculated mathematically now we've got two separate signal  
00:28:18.180 values one when we had no phase encoding gradients and one when we've got a specific phase encoding  
00:28:24.540 gradient that means the spins in these two pixels are 180 degrees out of phase with one another  
00:28:30.780 now remember the data that we are acquiring here at this given point represents all of the signal  
00:28:39.120 that is measured throughout the entire data acquisition period remember k space is taking  
00:28:44.280 that analog signal over a period of time and we're using all of that case-based data to frequency  
00:28:51.360 encode and make the data that is acquired along this line of the frequency encoding data space  
00:28:57.960 so this data point here represents all of the signal coming from the x-axis at this location  
00:29:03.840 over the entire data acquisition sample so we can't use this data point alone because this data  
00:29:11.220 point is the accumulation of signal over time what we need to then do is look at the k space data as  
00:29:18.840 well as the frequency encoding data and we can see that k space data will have a specific net  
00:29:26.040 magnetization Vector at t e that represents the entire net magnetization Vector of the slice at te  
00:29:35.040 now we don't want the data from the entire slice and we don't want the data from the entire data  
00:29:41.100 acquisition period and we can use both this data point and this data point to delineate  
00:29:48.000 the signal contribution from that x-axis location here at that specific given period  
00:29:54.960 of time and this in part is the process involved in two-dimensional Fourier transformation where  
00:30:00.900 we take these two data sets and create the image that we're eventually looking at on our computer  
00:30:05.520 screen now we don't need to know this process in detail but we need to know that it's the  
00:30:10.620 combination of these two data points that gives us these specific signal from that x-axis column  
00:30:16.500 at a given period of time so let's go about using these in an actual practical example  
00:30:22.380 we've taken that point in time where we've used our k space and this frequency encoding data to  
00:30:28.260 get a set measurable signal that we can calculate that's coming from this entire x-axis column here  
00:30:34.260 now again we're making the assumption that this signal is only coming from these two pixels in  
00:30:39.120 fact they're coming from 256 different pixels along the y-axis here now we don't know the  
00:30:45.480 individual signal contributions from these two separate pixels but we do know what the signal  
00:30:50.940 is based on the calculation that we've made from the entire x-axis column here and that signal can  
00:30:57.180 be given a specific value a specific numerical value for this example it's arbitrary we're  
00:31:02.040 going to use 14. now we know that the signal is a combination of both of these signals here we're  
00:31:09.540 assuming that these pixels are the only thing that's contributing to Signal along the x-axis  
00:31:14.340 now the amplitude from our first signal it added to the amplitude of our second signal  
00:31:20.040 will give us the amplitude of the total signal that we're measuring from this x-axis point  
00:31:25.500 now these net magnetization vectors have the same frequency because they're at the same x-axis  
00:31:30.720 location they're at the same frequency encoding gradient location not only do they have the same  
00:31:36.240 frequency but they're in Phase with one another because we haven't supplied a phase encoding  
00:31:40.920 gradient so we've generated a formula here where we can add the signal amplitude from signal one  
00:31:46.440 to the signal amplitude from signal 2 to get a numerical data point that we've calculated from  
00:31:52.800 our frequency encoding and our k space data we can then manipulate this formula to isolate signal 2  
00:31:59.760 here we've moved signal one across and we can see that signal 2 is equal to 14 the amplitude  
00:32:06.360 of the signal that we've calculated minus signal one minus the contribution from our first signal  
00:32:12.780 now remember that signal 2 is equal to 14 minus signal one let's look at the second example where  
00:32:19.680 we've applied a specific amount of phasing or D phasing gradient to the y-axis here which means  
00:32:27.060 that the pixels here are completely 180 degrees out of phase with one another we can then use  
00:32:34.080 this data point in combination with our k space to figure out what signal is being generated at  
00:32:40.260 this x-axis location and here we get a different numerical value because there's been de-phasing  
00:32:46.440 that signal coming from this x-axis location is going to be less than our original signal  
00:32:51.900 now this signal is a combination of both the signal from signal 1 and the signal from signal  
00:32:57.900 2. they are still at the same frequency because they're along the same x-axis location but  
00:33:03.720 they're at different phases now 180 degree outer phase because of this phase encoding gradient  
00:33:10.200 we can see that the frequencies remain the same but they're now 180 degrees out of phase  
00:33:15.240 this signal that we've now calculated is a combination of both signal one  
00:33:21.000 minus the amplitude of signal 2. so if we take signal one and take away the amplitude of signal 2  
00:33:28.860 we will get this value that we've calculated here now remember in the previous example we calculated  
00:33:34.920 what signal 2 was signal 2 was equal to 14 minus signal one so we can substitute that value in here  
00:33:42.120 signal one minus signal 2 which is 14 minus signal one will give us the amplitude of this measured  
00:33:49.860 signal that we have at this x-axis location we can then solve for this formula we take minus 14  
00:33:56.400 across so it'll be 6 plus 14 will give us 20 and Signal 1 minus minus signal 1 will be Sigma 1 plus  
00:34:04.260 signal one we get an equation here that we can calculate signal one plus signal one equals 20. so  
00:34:11.880 from this formula we can see that signal one the signal coming from one of our pixels must be 10.  
00:34:18.540 because 10 plus 10 will equal 20. substituting that signal one value in here 10 minus what will  
00:34:27.600 give us 6 10 minus 4 will give us 6. what we've done now is we've calculated the signal 2 value  
00:34:35.040 we've got a pixel value here an arbitrary number of 10 and a pixel value here of four we have now  
00:34:42.659 managed to differentiate the signal along the y-axis based on this dephasing comparing this D  
00:34:50.159 phasing to when our spins had no phase difference and hopefully you can see from this two pixel  
00:34:56.159 example how we can extrapolate this out to 256 different variables in our equation and use both  
00:35:04.320 the frequency encoding data and the k space data in combination to get signal values based on the  
00:35:10.920 x-axis location and based on a specific period of time when we are acquiring that data acquisition  
00:35:17.580 now the maths behind this is not important the core concept here is that we can delineate why  
00:35:24.420 access values based on their degree of D phasing that we apply along the y-axis of the slice  
00:35:31.020 now as we change the amount of D phasing along the y-axis of our slice those signals coming from the  
00:35:37.980 peripheries of our slice will experience a greater degree of dephasing than those near the middle of  
00:35:43.860 our slice and it's that degree of dephasing that we measure in this output signal that allows us to  
00:35:50.040 eventually calculate where the signal is coming from along the y-axis so to summarize now what  
00:35:56.400 we've done is we've used a simple pulse sequence using multiple different gradients to allow us to  
00:36:02.880 select a specific slice allow us to delineate the signal based on frequencies along the x-axis and  
00:36:11.520 then use multiple phase encoding steps along the y-axis combining all of those data sets to allow  
00:36:18.660 us to create our final image here now in order to create this frequency encoding data and ultimately  
00:36:25.440 create this image here we get all of the data from this data set here which is known as k space  
00:36:32.100 so you can see that just from storing the data in k space we can ultimately create individual  
00:36:37.860 images for each slice that we are generating in our MRI image and each slice has a different case  
00:36:43.740 based data set now in the next talk we're going to have a closer look at k space and  
00:36:48.360 how different regions of K space contribute to different features in this image here we know  
00:36:54.360 that any individual point in k space represents the net magnetization Vector of the entire slice  
00:37:01.080 at a given period of time but one data point is not enough to create this image here we  
00:37:07.440 need all of these data points in combination to create the MRI image now I know that this phase  
00:37:14.040 encoding step is very difficult conceptually to understand if you are interested in this stuff  
00:37:19.680 go through this lecture multiple times and make sure you have that understanding in your mind  
00:37:24.600 if these concepts are too complicated and you don't have the time to fully understand this  
00:37:29.220 understand that it's the degree of D phasing and the signal loss from that defacing that  
00:37:35.040 determines where signal is located along the y-axis of our image now these concepts are  
00:37:41.280 commonly asked in exams and if you are studying for a specific exam I've LinkedIn question Bank  
00:37:46.140 below that I've curated you can go and test yourself using that question bank if you're  
00:37:50.700 preparing for a specific exam otherwise I'll see you in the next talk where we're going to dive  
00:37:54.840 deeper into this data acquisition set known as k space I'll see you all there goodbye everybody
